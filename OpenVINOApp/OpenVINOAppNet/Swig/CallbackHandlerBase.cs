//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CallbackHandlerBase : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CallbackHandlerBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CallbackHandlerBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CallbackHandlerBase() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MyOpenVINOPINVOKE.delete_CallbackHandlerBase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void InferCallBack(int inferID, bool isSuccessed, floatVector results) {
    MyOpenVINOPINVOKE.CallbackHandlerBase_InferCallBack(swigCPtr, inferID, isSuccessed, floatVector.getCPtr(results));
    if (MyOpenVINOPINVOKE.SWIGPendingException.Pending) throw MyOpenVINOPINVOKE.SWIGPendingException.Retrieve();
  }

  public CallbackHandlerBase() : this(MyOpenVINOPINVOKE.new_CallbackHandlerBase(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("InferCallBack", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateCallbackHandlerBase_0(SwigDirectorMethodInferCallBack);
    MyOpenVINOPINVOKE.CallbackHandlerBase_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(CallbackHandlerBase));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodInferCallBack(int inferID, bool isSuccessed, global::System.IntPtr results) {
    InferCallBack(inferID, isSuccessed, new floatVector(results, true));
  }

  public delegate void SwigDelegateCallbackHandlerBase_0(int inferID, bool isSuccessed, global::System.IntPtr results);

  private SwigDelegateCallbackHandlerBase_0 swigDelegate0;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(int), typeof(bool), typeof(floatVector) };
}
