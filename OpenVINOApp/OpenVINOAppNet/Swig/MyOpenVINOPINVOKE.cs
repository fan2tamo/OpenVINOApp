//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


class MyOpenVINOPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="SWIGRegisterExceptionCallbacks_MyOpenVINO")]
    public static extern void SWIGRegisterExceptionCallbacks_MyOpenVINO(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_MyOpenVINO")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_MyOpenVINO(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_MyOpenVINO(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_MyOpenVINO(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="SWIGRegisterStringCallback_MyOpenVINO")]
    public static extern void SWIGRegisterStringCallback_MyOpenVINO(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_MyOpenVINO(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static MyOpenVINOPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_CallbackHandlerBase_InferCallBack")]
  public static extern void CallbackHandlerBase_InferCallBack(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, bool jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_new_CallbackHandlerBase")]
  public static extern global::System.IntPtr new_CallbackHandlerBase();

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_delete_CallbackHandlerBase")]
  public static extern void delete_CallbackHandlerBase(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_CallbackHandlerBase_director_connect")]
  public static extern void CallbackHandlerBase_director_connect(global::System.Runtime.InteropServices.HandleRef jarg1, CallbackHandlerBase.SwigDelegateCallbackHandlerBase_0 delegate0);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_modelName_set")]
  public static extern void NetworkInfo_modelName_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_modelName_get")]
  public static extern string NetworkInfo_modelName_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_inputLayout_set")]
  public static extern void NetworkInfo_inputLayout_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_inputLayout_get")]
  public static extern int NetworkInfo_inputLayout_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_inputPrecision_set")]
  public static extern void NetworkInfo_inputPrecision_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_inputPrecision_get")]
  public static extern int NetworkInfo_inputPrecision_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_outputLayout_set")]
  public static extern void NetworkInfo_outputLayout_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_outputLayout_get")]
  public static extern int NetworkInfo_outputLayout_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_outputPrecision_set")]
  public static extern void NetworkInfo_outputPrecision_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_outputPrecision_get")]
  public static extern int NetworkInfo_outputPrecision_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_devices_set")]
  public static extern void NetworkInfo_devices_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_devices_get")]
  public static extern global::System.IntPtr NetworkInfo_devices_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_isMultiDevices_set")]
  public static extern void NetworkInfo_isMultiDevices_set(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_isMultiDevices_get")]
  public static extern bool NetworkInfo_isMultiDevices_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_threadNum_set")]
  public static extern void NetworkInfo_threadNum_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_NetworkInfo_threadNum_get")]
  public static extern uint NetworkInfo_threadNum_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_new_NetworkInfo")]
  public static extern global::System.IntPtr new_NetworkInfo();

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_delete_NetworkInfo")]
  public static extern void delete_NetworkInfo(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_IMyOpenVINO_Initialize")]
  public static extern bool IMyOpenVINO_Initialize(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_IMyOpenVINO_GetAvailableDevices")]
  public static extern global::System.IntPtr IMyOpenVINO_GetAvailableDevices(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_IMyOpenVINO_InferASync")]
  public static extern int IMyOpenVINO_InferASync(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_IMyOpenVINO_InferSync")]
  public static extern global::System.IntPtr IMyOpenVINO_InferSync(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_IMyOpenVINO_SetInferCallBack")]
  public static extern void IMyOpenVINO_SetInferCallBack(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_IMyOpenVINO_WaitForEndOfInfer")]
  public static extern void IMyOpenVINO_WaitForEndOfInfer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_delete_IMyOpenVINO")]
  public static extern void delete_IMyOpenVINO(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_GetInstance")]
  public static extern global::System.IntPtr GetInstance();

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_Clear")]
  public static extern void DeviceVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_Add")]
  public static extern void DeviceVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_size")]
  public static extern uint DeviceVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_capacity")]
  public static extern uint DeviceVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_reserve")]
  public static extern void DeviceVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_new_DeviceVector__SWIG_0")]
  public static extern global::System.IntPtr new_DeviceVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_new_DeviceVector__SWIG_1")]
  public static extern global::System.IntPtr new_DeviceVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_new_DeviceVector__SWIG_2")]
  public static extern global::System.IntPtr new_DeviceVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_getitemcopy")]
  public static extern int DeviceVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_getitem")]
  public static extern int DeviceVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_setitem")]
  public static extern void DeviceVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_AddRange")]
  public static extern void DeviceVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_GetRange")]
  public static extern global::System.IntPtr DeviceVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_Insert")]
  public static extern void DeviceVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_InsertRange")]
  public static extern void DeviceVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_RemoveAt")]
  public static extern void DeviceVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_RemoveRange")]
  public static extern void DeviceVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_Repeat")]
  public static extern global::System.IntPtr DeviceVector_Repeat(int jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_Reverse__SWIG_0")]
  public static extern void DeviceVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_Reverse__SWIG_1")]
  public static extern void DeviceVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_DeviceVector_SetRange")]
  public static extern void DeviceVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_delete_DeviceVector")]
  public static extern void delete_DeviceVector(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_Clear")]
  public static extern void floatVector_Clear(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_Add")]
  public static extern void floatVector_Add(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_size")]
  public static extern uint floatVector_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_capacity")]
  public static extern uint floatVector_capacity(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_reserve")]
  public static extern void floatVector_reserve(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_new_floatVector__SWIG_0")]
  public static extern global::System.IntPtr new_floatVector__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_new_floatVector__SWIG_1")]
  public static extern global::System.IntPtr new_floatVector__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_new_floatVector__SWIG_2")]
  public static extern global::System.IntPtr new_floatVector__SWIG_2(int jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_getitemcopy")]
  public static extern float floatVector_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_getitem")]
  public static extern float floatVector_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_setitem")]
  public static extern void floatVector_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_AddRange")]
  public static extern void floatVector_AddRange(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_GetRange")]
  public static extern global::System.IntPtr floatVector_GetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_Insert")]
  public static extern void floatVector_Insert(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_InsertRange")]
  public static extern void floatVector_InsertRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_RemoveAt")]
  public static extern void floatVector_RemoveAt(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_RemoveRange")]
  public static extern void floatVector_RemoveRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_Repeat")]
  public static extern global::System.IntPtr floatVector_Repeat(float jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_Reverse__SWIG_0")]
  public static extern void floatVector_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_Reverse__SWIG_1")]
  public static extern void floatVector_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_SetRange")]
  public static extern void floatVector_SetRange(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_Contains")]
  public static extern bool floatVector_Contains(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_IndexOf")]
  public static extern int floatVector_IndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_LastIndexOf")]
  public static extern int floatVector_LastIndexOf(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_floatVector_Remove")]
  public static extern bool floatVector_Remove(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("MyOpenVINO", EntryPoint="CSharp_delete_floatVector")]
  public static extern void delete_floatVector(global::System.Runtime.InteropServices.HandleRef jarg1);
}
