//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class IMyOpenVINO : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IMyOpenVINO(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IMyOpenVINO obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IMyOpenVINO() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          MyOpenVINOPINVOKE.delete_IMyOpenVINO(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual bool Initialize(NetworkInfo networkInfo) {
    bool ret = MyOpenVINOPINVOKE.IMyOpenVINO_Initialize(swigCPtr, NetworkInfo.getCPtr(networkInfo));
    if (MyOpenVINOPINVOKE.SWIGPendingException.Pending) throw MyOpenVINOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual DeviceVector GetAvailableDevices() {
    DeviceVector ret = new DeviceVector(MyOpenVINOPINVOKE.IMyOpenVINO_GetAvailableDevices(swigCPtr), true);
    return ret;
  }

  public virtual int InferASync(string imageName) {
    int ret = MyOpenVINOPINVOKE.IMyOpenVINO_InferASync(swigCPtr, imageName);
    if (MyOpenVINOPINVOKE.SWIGPendingException.Pending) throw MyOpenVINOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual floatVector InferSync(string imageName) {
    floatVector ret = new floatVector(MyOpenVINOPINVOKE.IMyOpenVINO_InferSync(swigCPtr, imageName), true);
    if (MyOpenVINOPINVOKE.SWIGPendingException.Pending) throw MyOpenVINOPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetInferCallBack(CallbackHandlerBase callbackHandler) {
    MyOpenVINOPINVOKE.IMyOpenVINO_SetInferCallBack(swigCPtr, CallbackHandlerBase.getCPtr(callbackHandler));
    if (MyOpenVINOPINVOKE.SWIGPendingException.Pending) throw MyOpenVINOPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void WaitForEndOfInfer() {
    MyOpenVINOPINVOKE.IMyOpenVINO_WaitForEndOfInfer(swigCPtr);
  }

}
